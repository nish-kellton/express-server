#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myexpressapp:server');
var http = require('http');
var { Server } = require('socket.io');

var corsOptions = {
  origin: ['http://localhost:3000', 'http://localhost:3001'],
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = new Server(server, {
  connectionStateRecovery: {},
  cors: corsOptions,
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('server started on port ', port);
});
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', async(socket) => {
  const address = socket.handshake.headers.host;
  console.log('New connection from ');
  console.log(address);

  socket.on('ping', (arg, cb) => {
    console.log(`Received ping from ${address} at ${arg}`);
    cb({ isConnected: true, receivedOn: arg })
  });

  const interval = setInterval(async() => {
    try {
      const responses = await io.timeout(10000).emitWithAck("ping-client");
      console.log(responses); // one response per client
    } catch (e) {
      console.log('client didnt respond')
      // some clients did not acknowledge the event in the given delay
    }
  }, 10 * 1000)

  socket.on('disconnect', () => {
    console.log('disconnected from client');
    clearInterval(interval);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
